react is a JS library used to make dynamic frontend for webpages.
React uses component as a its building blocks.
React uses Syantax extension of js -> JSX (JavaScript XML).
JSX allows you to write HTML code within your JS file
Make different components and use them through App.jsx file by importing the components and calling them there.

-------------------------------------------------------------------------------
INSTALL AND USE REACT.
to use React NodeJS is required beacuse of its NPM.
command for npm -> npm create vite@latest -> enter.

Get in the folder where react is located in this example API->react->react-app 
then type in terminal (NPM run dev) this will start the react server on local host.
-------------------------------------------------------------------------------
COMPONENT:
React COMPONENT is a section of resuable JSX code.

Component Structure: A component has -> A function with a name.
                                     -> Returing Statement. (html tags)
                                     -> exporting that function.

STYLING COMPONENTS: 

1. External ->(Best for Large component) create a seperate file and import it in the component.

2. Modules -> (Best for Large component unique styling) it is component sepcific. each module 
              is created to style particular component. 
             
              component and module is placed in a same folder. 
              module css file name->  filname.module(keyword).css(extension) 

3. Inline-> (Best for small component)to write inline CSS in component html tags. create a  
            object which has all the CSS properties written then open style attribute on the html element and asgin that object to the style attribute.

-------------------------------------------------------------------------------
PROPS: 
Props are used to pass values to the component as key:value pair when rendering in the App.jsx file.
Props can be useful when getting data from Database and displaying it dynamically in a component.

prop component-> function prop_component (props){
                return(<h1>props.name</h1> );
                                                }

prop call -> <prop_component Name='Prop_value' age=20 />

PROP TYPES : prop types are used to esure that the porps passed are of the correct data type 
             or not.

Using prop types-> prop types are in node module folder.
   1-> import it by (import PorpTypes from 'prop-types')

   2-> component_name.PropTypes= {
    name: PropTypes.string,
    age: PropTypes.number,
    isactive: PropTypes.bool,
   }

if a prop value is of incorrect type then it will console log the error. 

DEFAULT PROPS-> it is used to define default values if no values are passed in the component 
                call

Using prop default-> 

   1-> component_name.defaultPorps= {
    name:"guest",
    age: 0,
    isactive: false,
   }

   2. <component_name/> (no prop values are passed).
   
------------------------------------------------------------------------------------------

Conditional Rendering: Render components according to some Conditional Statements.

------------------------------------------------------------------------------------------
React Hook: it is a special fucntion that lets you do things like keep track of information (STATE) and do any 
            action when something changes in your app (effect).

            Hooks simply helps you write less code and make your app easier to manage.
            
            there are many types of react hook: useState,useEffect, useContext, useReducer and more.
            useState and useEffect being the most used.

useState: a react hook which lets you manage the state of a functional component and lets you keep track of 
          the state or the values which changes overtime such as user input. 

         import useState-> imoprt React,{useState} from 'react';

         useState has to components:
         1. statefull variable.
         2. setter function.

         statefull variable is variable which holds a value setter function is there to update the state or value of the statefull variable and reloads the vritual DOM.

         const [name, setName] = userState();// here name is a statefull variable and setName is the setter function.


useEffect: a react hook which is used to do something when:
           1. component re-renders.
           2. component is mount.
           3. the state of a value is changed.         

           useEffect(callback_fuction,[dependices]); [dependices] are optional.

          different way to wirte useEffect hook.
          1. useEffect( ()=>{} );  -> when a callback fucntion is passed only this will run 
                                      after every re-render.

          2. useEffect( ()=>{} ,[]) -> when callback fucntion and a dependacy is passed this will run whenever 
                                       whenever a component is mounted. (component is inserted by its intial value or state).

          3. useEffect(()=>{} , [state/value]) -> this will run only when tsheres a re-render and a the value 
                                                   or the state will change.

          Uses: 1. Event Listeners.
                2. DOM manuplation.
                3. real time updates Subscription
                4. Fetching data from API.
                5. clean up when a component unmounts. (mount= Add a component to DOM , unmount=remove a 
                                                       component from the DOM)



useContext: it is used to pass a value from one component to another. it is usefull in nested 
            components or multiple level components without Using props. 

            there are two roles:
            1. provider component.
            2. consumer component.

            provider component is the parent component from which the value will be passed to the other components.

            steps to setup useContext for provider:
            1. import React,{useContext} from 'react';
            2. export const context = createContext();
            3. <context.provider value = {value1}>
                <consumer_component value1={value1}/> 
               </context.provider>

            consumer component is the child component which recieve the value from provider and consume it.
        
            steps to setup useContext for consumer:
            1. import React,{useContext} from 'react';
            2. import {context} from './component_parent';
            3. cost value = useContext(context);

useRef: it is used to update a state or value of a variable wihtout re-rendering unlike useState. 
        useref returns a object(current) which has the current/intial value.
         
        setup:
        1. import React,{useRef} from "react";
        2. const ref_variable= useref(0); // 0 is current value.
        3. ref_variable.current 
------------------------------------------------------------------------------------------
Onchange event: this event handler is primarily with form elements. such as <inputs>, <textarea>, <select>, 
                <radio>. this event is triggered whenever something changes.  

------------------------------------------------------------------------------------------
Updater functions: fucntions used to update the state variable's state.
                   these functions are used within the setter function of the state vairable.
                   
                   Updater fucntions comes handy when we want to update the state more than one time in one go.

                   Updater function is basically a callback function in the setter fucntion.

                   so if a state is tried to update multiple times like this.
                   function update_state(){
                     setState( count + 1);
                      setState( count + 1);
                       setState( count + 1);
                   }     

                   this way react will not update the count 3 times but only single time as react will batch all the request as one.

                   to solve this Updater functions comes handy.
                   ex: function update_state(){
                     setState(()=> count + 1);
                      setState(()=> count + 1);
                       setState(()=> count + 1);
                   }     
                   now these request will be accepted seperatly.

------------------------------------------------------------------------------------------
React Router: it is used to create a route between pages.
              it is a external dependancy.

               setup: 
               1. open terminal and install React Router.
                        npm instal react-router-dom 

               2. go in the main.JSX

               3. import {BrowserRouter} from "react-router-dom"
            
               4. wrap the App component between 
                  <BrowserRouter> <App/> </BrowserRouter>

           Now router can be used to setup routes.
           steps: 
              1. go in the App.jsx component.
              2. import {Routes, Route} from "react-router-dom"
              3. then define routes. 
                     <Routes>
                     <Route path='/' element={<Home/>}/>
                      <Route path='/contact' element={<Contact/>}/>
                     <Routes/>

          you can show components according to the routes.           
          
          react-router-dom gives <link> too. this is used as the <a> tag for creating linked elements.
               1. import {link} from 'react-router-dom'
               2.  <link to='/home'> Home <link/>   